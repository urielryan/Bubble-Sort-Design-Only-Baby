<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAICAAAAEAIACoEAAAFgAAACgAAAAgAAAAQAAAAAEAIAAAAAAAABAAABMLAAATCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACAAAACQAA
        AAsAAAAFAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAH9/fwB1dXUFnZ2dOa+v
        r3uxsbGXnZ2djGBgYGAODg4tAAAACAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADh4eEA4ODgDeHh
        4YDq6+vn7u3t/uzq6//v7e7+5+fn666urqgtLS1JAAAACwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vLyAPTz
        8wXw8fGG8PDw+s7Bw/+gf4L/lWxu/6B9gP/Mvb//8O/v/Lm5ubMZGRk6AAAAAgAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADy8vIA8vLyQ/Pz8+7FtLf/kF5X/8WHWv/en2P/x4lb/5FeVf/Cr7L/7e7u9YWFhX8AAAAQAAAAAz4+
        PhpQUFAzSEhIOywsLDMEBAQfAAAACwAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA8vLyAPLy8gDz9PSO5+Pk/5Rpaf/UlmD//8Fw///Bcf//wnH/2Jph/5JmZf/m4uP/w8PDuGVl
        ZUvHx8eG19jYxuHi4t/h4uLi1tfX0rW2tqtqampsDQ0NLQAAAAcAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAADx8fEA8fHxB/T19bDXzc//l2NW//W9ff//0Zb//79w//+/cP/3uG3/mWRW/9PI
        y//p6urr5OTk4u3s7P7a0dL/x7e7/8a1uP/Vycv/6+np/+np6e2rq6ukJycnRQAAAAoAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAPHx8QDx8fEF9PX1qtvS1P+UYVj/8bt+///lwv//0Zj//8Fz//O0
        bP+WYlf/183P//X29f/a0dL/nXt//41bVf+cZVD/n2dR/5BcUf+UbW//y7y///Dv7/u3t7exHR0dPgAA
        AAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA9PT0APLy8gDy8/N57evr/5x4ev+8gFj//MuO///X
        of/8v3T/wINZ/5p0dv/t6uv/1crM/41gYP+zeFP/661o//y8bv/9vW//8bJq/8SIWf+KWFL/wa6x/+7v
        7/iWlpaRAAAAHg4ODgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vLyAPLy8ijz9PTZ2tDS/5Vs
        bP+iaVH/uXxW/6RrU/+TaWr/183P/+nl5v+Ta27/vIBW//2+b///wHD//79w//+/cP//wHD//8Fx/9SX
        Xv+KW1n/2tDS/9vc3Nk8PDxJAAAAAgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADz8/MA19fXAOvr
        61fx8fHv5eDh/8Gusv+xl5z/wK2x/+Xg4f/3+fj/xLO2/5ZfTv/2t2z//8Bw//+/cP//v3D//79w//+/
        cP//v3D//r9w/6xyUf+qjpP/7u7u+ISEhHcAAAAJAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAM/P
        zwDGxsYO3d3de/Dw8PHt6+z/1srO/72orP+xl5z/spqe/8Syt/+beX//uH1V///Ddf//wnb//79w//+/
        cP//v3D//79w//+/cP//wXH/1Jde/5Rsbf/s6ur/qqqqmAAAAA0AAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AADo6OgA5+fnD+zs7Jbw8PD6z8HE/5hydf+HVUb/kFo1/5ZfMP+VXjL/jFc6/3tHQP/NkFv//9GV///V
        ov//v2///79w//+/cP//v3D//79w///Bcf/ipGT/kmZm/+rn6P+3t7efAAAADAAAAAAAAAAAAAAAAAAA
        AAAAAAAA8fHxAPHx8QTx8fGD8PDw/Lynqv+FVUv/nmYu/7d/KP+9hSf/voYn/76GJ/+8hCf/p3At/8+T
        UP//zY7//+G8///CeP//vm7//79w//+/cP//v3D//8Fx/9GUXf+VbnD/7Orq/7Ozs4wAAAAFAAAAAAAA
        AAAAAAAAAAAAAOzs7ADy8vIA8fHxRPPz8+3Fs7b/hVNG/6x0Kv++hif/vYUn/72FJ/+9hSf/vYUn/72F
        J/+0fSn/uYA+//i7cP//3LL//9uw///Jhv//wnb//79w//+/cP/9vm//p21Q/6+Vmf/t7e32oaGhWv//
        /wAAAAAAAAAAAAAAAAAAAAAA8/PzAPPz8wfz9PSp493e/4xhX/+mbiz/voYn/72FJ/+9hSf/vYUn/72F
        J/+9hSf/vYUn/7uEJ/+rdS7/0JVP//3Cef//2aj//+K9///Rl///wHD//sBw/8qOW/+LX17/3tbX/+Hi
        4sl9fX0clpaWAAAAAAAAAAAAAAAAAAAAAADy8vIA8vLyK/T19ea8pqv/jFc4/7yEJ/+9hSf/vYUn/72F
        J/+9hSf/vYUn/72FJ/+9hSf/vYUn/7iAKP+rdDD/yY5K/+utZP/2u3T/+bty/+mqZv+3fFT/ilpY/8m6
        vP/w8PDx0tLSWf///wBVVVUAAAAAAAAAAAAAAAAAAAAAAPLy8gDz8/NW8O/v+516ff+haC3/voUl/72F
        Jv+9hSf/vYUn/72FJ/+9hSf/vYUn/72FJ/+9hSf/vYUn/7mBKP+udiv/k107/5BaTf+XYVL/jV1Y/516
        fv/Uycv/8vLy9Ovr63i8vLwFzc3NAAAAAAAAAAAAAAAAAAAAAAAAAAAA8vLyAPLz83Lr6On/kGdm/6xz
        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
        A//4AAf//AAP//4AH///gH////////////8=
</value>
  </data>
</root>